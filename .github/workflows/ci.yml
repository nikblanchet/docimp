name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    # Run on all PRs regardless of target branch

jobs:
  python-tests:
    name: Python Tests (3.13)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: cli/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov ruff mypy

      - name: Install Node dependencies and build CLI
        run: |
          cd cli
          npm ci
          npm run build

      - name: Lint with ruff
        run: |
          cd analyzer
          ruff check .

      - name: Type check with mypy
        run: |
          cd analyzer
          mypy src --ignore-missing-imports
        continue-on-error: true

      - name: Run tests
        run: |
          cd analyzer
          pytest -v --cov=src --cov-report=term

  typescript-tests:
    name: TypeScript Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['22']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: cli/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies
        run: |
          cd cli
          npm ci

      - name: Lint TypeScript
        run: |
          cd cli
          npm run lint

      - name: Lint JSDoc
        run: |
          cd cli
          npm run lint:jsdoc
        continue-on-error: true

      - name: Type check
        run: |
          cd cli
          npx tsc --noEmit

      - name: Build
        run: |
          cd cli
          npm run build

      - name: Run tests
        run: |
          cd cli
          npm test

      - name: Run integration tests
        run: |
          cd cli
          npm run test:integration

  integration-test:
    name: Integration Test (Python + TypeScript)
    runs-on: ubuntu-latest
    needs: [python-tests, typescript-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: cli/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node dependencies and build
        run: |
          cd cli
          npm ci
          npm run build

      - name: Run end-to-end analysis test
        env:
          DOCIMP_ANALYZER_PATH: ${{ github.workspace }}/analyzer
        run: |
          cd cli
          node dist/index.js analyze ../examples --format json > /dev/null
          echo "✓ End-to-end analysis completed successfully"

  module-system-matrix:
    name: Module System Tests (CommonJS/ESM)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: cli/package-lock.json

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          cd cli && npm ci && npm run build && cd ..

      - name: Test ESM JavaScript parsing
        run: |
          cd analyzer
          python -c "
          from src.parsers.typescript_parser import TypeScriptParser
          parser = TypeScriptParser()
          items = parser.parse_file('../examples/test_javascript_patterns.js')
          assert any(item.module_system == 'esm' for item in items), 'ESM not detected'
          print('✓ ESM detection working')
          "

      - name: Test CommonJS parsing
        run: |
          cd analyzer
          python -c "
          from src.parsers.typescript_parser import TypeScriptParser
          parser = TypeScriptParser()
          items = parser.parse_file('../examples/test_commonjs.cjs')
          assert any(item.module_system == 'commonjs' for item in items), 'CommonJS not detected'
          print('✓ CommonJS detection working')
          "

  workflow-validation:
    name: Workflow Validation (Test Samples)
    runs-on: ubuntu-latest
    needs: [python-tests, typescript-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: cli/package-lock.json

      - name: Install jq (for JSON validation in test script)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node dependencies and build
        run: |
          cd cli
          npm ci
          npm run build

      - name: Run workflow validation tests
        env:
          DOCIMP_ANALYZER_PATH: ${{ github.workspace }}/analyzer
        run: |
          chmod +x test-samples/test-workflows.sh
          ./test-samples/test-workflows.sh
